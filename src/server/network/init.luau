--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Server generated by Zap v0.6.9 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		send_events = noop,
		replicate = table.freeze({
			fire = noop,
			fire_all = noop,
			fire_except = noop,
			fire_list = noop,
			fire_set = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end
local reliable = ReplicatedStorage:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = ReplicatedStorage
end

local unreliable = ReplicatedStorage:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = ReplicatedStorage
end
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function send_events()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(send_events)

local events = table.create(1)
local returns = table.freeze({
	send_events = send_events,
	replicate = table.freeze({
		fire = function(player: Player, value: ({ [(string)]: ({
			set: ({ ((unknown)) }),
			ids: ({ (number) }),
			removed: (({ (number) })?),
		}) }))
			load_player(player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_3 = #v_1.set
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
				for i_1 = 1, len_3 do
					local val_1 = v_1.set[i_1]
					if val_1 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_1)
					end
				end
				local len_4 = #v_1.ids
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
				for i_2 = 1, len_4 do
					local val_2 = v_1.ids[i_2]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_2)
				end
				if v_1.removed == nil then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				else
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					local len_5 = #v_1.removed
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_3 = 1, len_5 do
						local val_3 = v_1.removed[i_3]
						alloc(4)
						buffer.writeu32(outgoing_buff, outgoing_apos, val_3)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			player_map[player] = save()
		end,
		fire_all = function(value: ({ [(string)]: ({
			set: ({ ((unknown)) }),
			ids: ({ (number) }),
			removed: (({ (number) })?),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_3 = #v_1.set
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
				for i_1 = 1, len_3 do
					local val_1 = v_1.set[i_1]
					if val_1 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_1)
					end
				end
				local len_4 = #v_1.ids
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
				for i_2 = 1, len_4 do
					local val_2 = v_1.ids[i_2]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_2)
				end
				if v_1.removed == nil then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				else
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					local len_5 = #v_1.removed
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_3 = 1, len_5 do
						local val_3 = v_1.removed[i_3]
						alloc(4)
						buffer.writeu32(outgoing_buff, outgoing_apos, val_3)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		fire_except = function(except: Player, value: ({ [(string)]: ({
			set: ({ ((unknown)) }),
			ids: ({ (number) }),
			removed: (({ (number) })?),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_3 = #v_1.set
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
				for i_1 = 1, len_3 do
					local val_1 = v_1.set[i_1]
					if val_1 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_1)
					end
				end
				local len_4 = #v_1.ids
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
				for i_2 = 1, len_4 do
					local val_2 = v_1.ids[i_2]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_2)
				end
				if v_1.removed == nil then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				else
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					local len_5 = #v_1.removed
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_3 = 1, len_5 do
						local val_3 = v_1.removed[i_3]
						alloc(4)
						buffer.writeu32(outgoing_buff, outgoing_apos, val_3)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		fire_list = function(list: { Player }, value: ({ [(string)]: ({
			set: ({ ((unknown)) }),
			ids: ({ (number) }),
			removed: (({ (number) })?),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_3 = #v_1.set
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
				for i_1 = 1, len_3 do
					local val_1 = v_1.set[i_1]
					if val_1 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_1)
					end
				end
				local len_4 = #v_1.ids
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
				for i_2 = 1, len_4 do
					local val_2 = v_1.ids[i_2]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_2)
				end
				if v_1.removed == nil then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				else
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					local len_5 = #v_1.removed
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_3 = 1, len_5 do
						local val_3 = v_1.removed[i_3]
						alloc(4)
						buffer.writeu32(outgoing_buff, outgoing_apos, val_3)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in list do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		fire_set = function(set: { [Player]: true }, value: ({ [(string)]: ({
			set: ({ ((unknown)) }),
			ids: ({ (number) }),
			removed: (({ (number) })?),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_3 = #v_1.set
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
				for i_1 = 1, len_3 do
					local val_1 = v_1.set[i_1]
					if val_1 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_1)
					end
				end
				local len_4 = #v_1.ids
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
				for i_2 = 1, len_4 do
					local val_2 = v_1.ids[i_2]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_2)
				end
				if v_1.removed == nil then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				else
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					local len_5 = #v_1.removed
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_3 = 1, len_5 do
						local val_3 = v_1.removed[i_3]
						alloc(4)
						buffer.writeu32(outgoing_buff, outgoing_apos, val_3)
					end
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
})
type Events = typeof(returns)
return returns
