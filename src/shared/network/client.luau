--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.14.0 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild("BLINK_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild("BLINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Types = {}
local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = CreateQueue()

function Types.ReadEVENT_replicate(): ({[string]: { set: {any}, ids: {number}, removed: ({number})? }})
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Value = {}
	local Elements_1 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	for _ = 1, Elements_1 do
		local OFFSET = Read(2)
		local Length = buffer.readu16(RecieveBuffer, OFFSET)
		local Key_1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
		local Element_1 = {} :: any
		-- START ARRAY
		local OFFSET = Read(2)
		Length = buffer.readu16(RecieveBuffer, OFFSET)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Element_1.set = table.create(Length)
			-- Read BLOCK: 1 bytes
		local ARRAY_START_2 = Read(1 * Length)
		for Index = 1, Length do
			local Item_2
			-- Read 1
			local OPERATION_OFFSET = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1 then
				RecieveInstanceCursor += 1
				Item_2 = RecieveInstances[RecieveInstanceCursor]
				table.insert(Element_1.set, Item_2)
			end
			-- END ARRAY
		end
		-- START ARRAY
		local OFFSET = Read(2)
		Length = buffer.readu16(RecieveBuffer, OFFSET)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Element_1.ids = table.create(Length)
			-- Read BLOCK: 4 bytes
		local ARRAY_START_2 = Read(4 * Length)
		for Index = 1, Length do
			-- Read 4
			local OPERATION_OFFSET = ARRAY_START_2
			ARRAY_START_2 += 4
			local Item_2 = buffer.readu32(RecieveBuffer, OPERATION_OFFSET)
			table.insert(Element_1.ids, Item_2)
		end
		-- END ARRAY
		local OFFSET = Read(1)
		if buffer.readu8(RecieveBuffer, OFFSET) == 1 then
			-- Read BLOCK: 2 bytes
			local BLOCK_START = Read(2)
			-- START ARRAY
			Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
			if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
			Element_1.removed = table.create(Length)
				-- Read BLOCK: 4 bytes
			local ARRAY_START_3 = Read(4 * Length)
			for Index = 1, Length do
				-- Read 4
				local OPERATION_OFFSET = ARRAY_START_3
				ARRAY_START_3 += 4
				local Item_2 = buffer.readu32(RecieveBuffer, OPERATION_OFFSET)
				table.insert(Element_1.removed, Item_2)
			end
			-- END ARRAY
		end
		Value[Key_1] = Element_1
	end
	return Value
end

function Types.WriteEVENT_replicate(Value: {[string]: { set: {any}, ids: {number}, removed: ({number})? }}): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	local Elements_1 = 0
	for Key_1, Element_1 in Value do
		Elements_1 += 1
		local Length = #Key_1
		local OFFSET = Allocate(2)
		buffer.writeu16(SendBuffer, OFFSET, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Key_1, Length)
		-- START ARRAY
		local OFFSET = Allocate(2)
		buffer.writeu16(SendBuffer, OFFSET, #Element_1.set)
			-- Allocate BLOCK: 1 bytes
		local ARRAY_START_2 = Allocate(1 * #Element_1.set)
		for Index = 1, #Element_1.set do
			local Item_2 = Element_1.set[Index]
			-- Allocate 1
			local OPERATION_OFFSET = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_2 ~= nil and 1 or 0)
			if Item_2 ~= nil then
				table.insert(SendInstances, Item_2)
			end
			-- END ARRAY
		end
		-- START ARRAY
		local OFFSET = Allocate(2)
		buffer.writeu16(SendBuffer, OFFSET, #Element_1.ids)
			-- Allocate BLOCK: 4 bytes
		local ARRAY_START_2 = Allocate(4 * #Element_1.ids)
		for Index = 1, #Element_1.ids do
			local Item_2 = Element_1.ids[Index]
			-- Allocate 4
			local OPERATION_OFFSET = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET, Item_2)
		end
		-- END ARRAY
		local OFFSET = Allocate(1)
		buffer.writeu8(SendBuffer, OFFSET, Element_1.removed ~= nil and 1 or 0)
		if Element_1.removed ~= nil then
			-- Allocate BLOCK: 2 bytes
			local BLOCK_START = Allocate(2)
			-- START ARRAY
			buffer.writeu16(SendBuffer, BLOCK_START + 0, #Element_1.removed)
				-- Allocate BLOCK: 4 bytes
			local ARRAY_START_3 = Allocate(4 * #Element_1.removed)
			for Index = 1, #Element_1.removed do
				local Item_2 = Element_1.removed[Index]
				-- Allocate 4
				local OPERATION_OFFSET = ARRAY_START_3
				ARRAY_START_3 += 4
				buffer.writeu32(SendBuffer, OPERATION_OFFSET, Item_2)
			end
			-- END ARRAY
		end
	end
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Elements_1)
end


local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end

local Elapsed = 0
RunService.Heartbeat:Connect(function(DeltaTime: number)
	Elapsed += DeltaTime
	if Elapsed >= (1 / 61) then
		Elapsed -= (1 / 61)
		StepReplication()
	end
end)

Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			Push(Queue.Reliable[0], table.pack(Types.ReadEVENT_replicate()))
		end
	end
end)

Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)

return {
	step_replication = StepReplication,

	replicate = {
		next = function(): () -> (number, {[string]: { set: {any}, ids: {number}, removed: ({number})? }})
			local index = 0
			local queue = Queue.Reliable[0]
			return function (): (number, {[string]: { set: {any}, ids: {number}, removed: ({number})? }})
				index += 1
				local arguments = Pop(queue)
				if arguments ~= nil then
					return index, unpack(arguments, 1, arguments.n)
				end
				return 
			end
		end
	},

}